/* JoinStatement -- Automatically generated by TreeBuilder */

package de.uni_freiburg.informatik.ultimate.boogie.ast;

import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import de.uni_freiburg.informatik.ultimate.core.model.models.ILocation;
import de.uni_freiburg.informatik.ultimate.boogie.ast.BoogieASTNode;
import java.util.Arrays;
/**
 * A join statement waits for a procedure (which was called
 * with fork before) to termiate.
 */
public class JoinStatement extends Statement {
    private static final long serialVersionUID = 1L;
    private static final java.util.function.Predicate<BoogieASTNode> VALIDATOR = 
			BoogieASTNode.VALIDATORS.get(JoinStatement.class);
    /**
     * The id of the fork expression, to which the join statement
     * is referring to.
     */
    Expression forkID;

    /**
     * The variables where the return values are written to.
     */
    VariableLHS[] lhs;

    /**
     * The constructor taking initial values.
     * @param loc the location of this node
     * @param forkID the id of the fork expression, to which the join statement
     * is referring to.
     * @param lhs the variables where the return values are written to.
     */
    public JoinStatement(ILocation loc, Expression forkID, VariableLHS[] lhs) {
        super(loc);
        this.forkID = forkID;
        this.lhs = lhs;
        assert VALIDATOR == null || VALIDATOR.test(this) : "Invalid JoinStatement: " + this;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("JoinStatement").append('[');
        sb.append(forkID);
        sb.append(',');
        if (lhs == null) {
            sb.append("null");
        } else {
            sb.append('[');
            for(int i1 = 0; i1 < lhs.length; i1++) {
                if (i1 > 0) sb.append(',');
                    sb.append(lhs[i1]);
            }
            sb.append(']');
        }
        return sb.append(']').toString();
    }

    /**
     * Gets the id of the fork expression, to which the join statement
     * is referring to.
     * @return the id of the fork expression, to which the join statement
     * is referring to.
     */
    public Expression getForkID() {
        return forkID;
    }

    /**
     * Gets the variables where the return values are written to.
     * @return the variables where the return values are written to.
     */
    public VariableLHS[] getLhs() {
        return lhs;
    }

    public List<BoogieASTNode> getOutgoingNodes() {
        List<BoogieASTNode> children = super.getOutgoingNodes();
        children.add(forkID);
        if(lhs!=null){
            children.addAll(Arrays.asList(lhs));
        }
        return children;
    }

    public void accept(GeneratedBoogieAstVisitor visitor) {
        if(visitor.visit((Statement)this)){
                } else {
                        return;
                        }
        if(visitor.visit(this)){
            if(forkID!=null){
                forkID.accept(visitor);
            }
            if(lhs!=null){
                for(VariableLHS elem : lhs){
                    elem.accept(visitor);
                }
            }
        }
    }

    public JoinStatement accept(GeneratedBoogieAstTransformer visitor) {
        JoinStatement node = visitor.transform(this);
        if(node != this){
            return node;
        }

            Expression newforkID = null;
        if(forkID != null){
            newforkID = forkID.accept(visitor);
        }
        boolean isChanged=false;
            ArrayList<VariableLHS> tmpListnewlhs = new ArrayList<>();
        if(lhs != null){
            for(VariableLHS elem : lhs){
                VariableLHS newlhs = elem.accept(visitor);
                isChanged = isChanged || newlhs != elem;
                tmpListnewlhs.add(elem.accept(visitor));
            }
        }
        if(isChanged || forkID != newforkID){
            return new JoinStatement(loc, newforkID, tmpListnewlhs.toArray(new VariableLHS[0]));
        }
        return this;
    }
}
