/* JoinStatement -- Automatically generated by TreeBuilder */

package de.uni_freiburg.informatik.ultimate.boogie.ast;

import java.util.List;
import de.uni_freiburg.informatik.ultimate.core.model.models.ILocation;
import de.uni_freiburg.informatik.ultimate.boogie.ast.BoogieASTNode;
/**
 * A join statement waits for a procedure (which was called
 * with fork before) to termiate.
 */
public class JoinStatement extends Statement {
    private static final long serialVersionUID = 1L;
    private static final java.util.function.Predicate<BoogieASTNode> VALIDATOR = 
			BoogieASTNode.VALIDATORS.get(JoinStatement.class);
    /**
     * The id of the fork expression, to which the join statement
     * is referring to.
     */
    Expression forkID;

    /**
     * The constructor taking initial values.
     * @param loc the location of this node
     * @param forkID the id of the fork expression, to which the join statement
     * is referring to.
     */
    public JoinStatement(ILocation loc, Expression forkID) {
        super(loc);
        this.forkID = forkID;
        assert VALIDATOR == null || VALIDATOR.test(this) : "Invalid JoinStatement: " + this;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("JoinStatement").append('[');
        sb.append(forkID);
        return sb.append(']').toString();
    }

    /**
     * Gets the id of the fork expression, to which the join statement
     * is referring to.
     * @return the id of the fork expression, to which the join statement
     * is referring to.
     */
    public Expression getForkID() {
        return forkID;
    }

    public List<BoogieASTNode> getOutgoingNodes() {
        List<BoogieASTNode> children = super.getOutgoingNodes();
        children.add(forkID);
        return children;
    }

    public void accept(GeneratedBoogieAstVisitor visitor) {
        if(visitor.visit((Statement)this)){
                } else {
                        return;
                        }
        if(visitor.visit(this)){
            if(forkID!=null){
                forkID.accept(visitor);
            }
        }
    }

    public JoinStatement accept(GeneratedBoogieAstTransformer visitor) {
        JoinStatement node = visitor.transform(this);
        if(node != this){
            return node;
        }

            Expression newforkID = null;
        if(forkID != null){
            newforkID = forkID.accept(visitor);
        }
        if(forkID != newforkID){
            return new JoinStatement(loc, newforkID);
        }
        return this;
    }
}
